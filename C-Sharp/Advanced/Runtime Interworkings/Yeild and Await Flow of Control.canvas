{
	"nodes":[
		{"id":"c48664f21382b841","type":"group","x":1000,"y":-350,"width":920,"height":1305,"label":"Behind The Scenes"},
		{"id":"98882ee86c9abaa0","type":"group","x":160,"y":-350,"width":690,"height":1550,"label":"Steps"},
		{"type":"text","text":"```csharp\nusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        string[] urls = new[]\n        {\n            \"https://example.com/file1\",\n            \"https://example.com/file2\",\n            \"https://example.com/file3\"\n        };\n\n        Console.WriteLine(\"Starting downloads...\");\n        await DownloadFilesAsync(urls, \"downloaded\");\n        Console.WriteLine(\"Downloads complete.\");\n    }\n\n    public static async Task DownloadFilesAsync(string[] urls, string destinationFolder)\n    {\n        Directory.CreateDirectory(destinationFolder);\n\n        var tasks = new Task[urls.Length];\n        for (int i = 0; i < urls.Length; i++)\n        {\n            string url = urls[i];\n            string fileName = Path.GetFileName(url);\n            string destinationPath = Path.Combine(destinationFolder, fileName);\n            tasks[i] = DownloadFileAsync(url, destinationPath);\n        }\n\n        await Task.WhenAll(tasks);\n    }\n\n    public static async Task DownloadFileAsync(string url, string destinationPath)\n    {\n        using var httpClient = new HttpClient();\n        using var response = await httpClient.GetAsync(url, HttpCompletionOption.ResponseHeadersRead);\n        response.EnsureSuccessStatusCode();\n\n        using var fileStream = new FileStream(destinationPath, FileMode.Create, FileAccess.Write, FileShare.None);\n        await response.Content.CopyToAsync(fileStream);\n    }\n}\n```\n","id":"a81b0ecd40c848af","x":-920,"y":-240,"width":1000,"height":1060,"color":"4"},
		{"type":"text","text":"<div align=\"center\"> Example </div>","id":"2e42cd0e5a2154fe","x":-562,"y":-300,"width":285,"height":60,"color":"4"},
		{"type":"text","text":"[How do yield and await implement flow of control inÂ .NET?](https://stackoverflow.com/questions/42287737/how-do-yield-and-await-implement-flow-of-control-in-net)","id":"f1729b7c9738529c","x":-1460,"y":-240,"width":500,"height":71},
		{"type":"text","text":"On the first await in main, you yield control back to the caller of the method you are currently in, and allow the caller to continue executing code while you are waiting on the asynchronous operation to complete. In the case of this method, you would be yielding control to the runtime.\n```csharp\nawait DownloadFilesAsync(urls, \"downloaded\");\n```\nWhile the asynchronous operation is completing, the Runtime can run other code in the meantime while this method is chugging away.","id":"f73735617e381942","x":285,"y":60,"width":440,"height":350},
		{"type":"text","text":"3. Run Synchronous Code In DownloadFilesAsync","id":"aeb32b3887113de7","x":351,"y":410,"width":309,"height":90,"color":"2"},
		{"type":"text","text":"4. Yield Control To Main","id":"796273e2f07ff1d3","x":350,"y":920,"width":309,"height":70,"color":"2"},
		{"type":"text","text":"Now we await the next section of code and yield control back to main.\n\n```csharp\nawait Task.WhenAll(tasks);\n```","id":"aff9b0a439a192b4","x":286,"y":990,"width":440,"height":150},
		{"type":"text","text":"Here, now we are in the asynchronous method and at the very start we are just running all of the synchronous code before the first incomplete awaitable is hit.\n\n```csharp\nDirectory.CreateDirectory(destinationFolder);\n\nvar tasks = new Task[urls.Length];\nfor (int i = 0; i < urls.Length; i++)\n{\n    string url = urls[i];\n    string fileName = Path.GetFileName(url);\n    string destinationPath = Path.Combine(destinationFolder, fileName);\n    tasks[i] = DownloadFileAsync(url, destinationPath);\n}\n```\n\nThe code contained within each call to DownloadFileAsync starts execution immediately.","id":"10b7434f522fec73","x":180,"y":500,"width":650,"height":420},
		{"type":"text","text":"All of the code at the very start runs as normal. In this case, that is just the code:\n```csharp\nstring[] urls = new[] { \"https://example.com/file1\", \"https://example.com/file2\", \"https://example.com/file3\" };\n\nConsole.WriteLine(\"Starting download...\");\n```","id":"9bead4941db37cb1","x":285,"y":-270,"width":440,"height":260},
		{"type":"text","text":"1. Run Non-Async Code in Main","id":"ec9891b2c494776e","x":351,"y":-330,"width":309,"height":60,"color":"2"},
		{"type":"text","text":"2. Yield Control To Runtime","id":"a0752e49986923f0","x":351,"y":-10,"width":309,"height":70,"color":"2"},
		{"type":"text","text":"<div align=\"center\">await yields control back to Main()</div>","id":"9d302a4c37fdc327","x":1086,"y":430,"width":740,"height":70,"color":"1"},
		{"type":"text","text":"```csharp\npublic static async Task DownloadFilesAsync(string[] urls, string destinationFolder)\n{\n    Directory.CreateDirectory(destinationFolder);\n\n    var tasks = new Task[urls.Length];\n    for (int i = 0; i < urls.Length; i++)\n    {\n        string url = urls[i];\n        string fileName = Path.GetFileName(url);\n        string destinationPath = Path.Combine(destinationFolder, fileName);\n        tasks[i] = DownloadFileAsync(url, destinationPath);\n    }\n\n    await Task.WhenAll(tasks);\n}\n```","id":"3e03eebbaf362b6c","x":1086,"y":500,"width":740,"height":390},
		{"type":"text","text":"```csharp\nstatic async Task Main()\n{\n    string[] urls = new[]\n    {\n        \"https://example.com/file1\",\n        \"https://example.com/file2\",\n        \"https://example.com/file3\"\n    };\n\n    Console.WriteLine(\"Starting downloads...\");\n    await DownloadFilesAsync(urls, \"downloaded\");\n    Console.WriteLine(\"Downloads complete.\");\n}\n```","id":"2fe8ebcb6b0e44f7","x":1207,"y":20,"width":496,"height":350},
		{"type":"text","text":"The runtime awaits the Main method. When control is yielded back to the runtime, it allows the runtime to do other operations such as UI updates, timers, or other asynchronous operations.","id":"d83ecf11467d6b25","x":1276,"y":-270,"width":360,"height":160,"color":"5"},
		{"type":"text","text":"<div align=\"center\">Runtime</div>","id":"6f6619be747288e1","x":1330,"y":-330,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"<div align=\"center\">await yields control to the runtime</div>","id":"03c425e2c59ca6a2","x":1207,"y":-50,"width":496,"height":70,"color":"1"}
	],
	"edges":[
		{"id":"e0200e8f3d6e2942","fromNode":"2fe8ebcb6b0e44f7","fromSide":"right","toNode":"d83ecf11467d6b25","toSide":"right"},
		{"id":"8fa536a33a10e757","fromNode":"f73735617e381942","fromSide":"right","toNode":"2fe8ebcb6b0e44f7","toSide":"left"},
		{"id":"ea721380b7f2939e","fromNode":"3e03eebbaf362b6c","fromSide":"right","toNode":"2fe8ebcb6b0e44f7","toSide":"right"},
		{"id":"9a149d834bc18732","fromNode":"10b7434f522fec73","fromSide":"right","toNode":"3e03eebbaf362b6c","toSide":"left"}
	]
}